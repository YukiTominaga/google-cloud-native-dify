config:
  # ログを標準出力に設定
  LOG_FILE: ""
  # デバッグレベルの設定（必要に応じて変更可能: DEBUG, INFO, WARNING, ERROR, CRITICAL）
  LOG_LEVEL: INFO
  # ログデータフォーマット
  LOG_DATEFORMAT: '%Y-%m-%d %H:%M:%S'
  # ログタイムゾーン
  LOG_TZ: 'Asia/Tokyo'
  TZ: 'JST'
  # Enable request logging, which will log the request and response information.
  # And the log level is DEBUG
  ENABLE_REQUEST_LOGGING: false
  # Debug mode, default is false.
  # It is recommended to turn on this configuration for local development
  # to prevent some problems caused by monkey patch.
  DEBUG: false
  # Flask debug mode, it can output trace information at the interface when turned on,
  # which is convenient for debugging.
  FLASK_DEBUG: false
  # Deployment environment.
  # Supported values are `PRODUCTION`, `TESTING`. Default is `PRODUCTION`.
  # Testing environment. There will be a distinct color label on the front-end page,
  # indicating that this environment is a testing environment.
  DEPLOY_ENV: 'PRODUCTION'
  # When enabled, migrations will be executed prior to application startup
  # and the application will start after the migrations have completed.
  MIGRATION_ENABLED: true
  # Access token expiration time in minutes
  ACCESS_TOKEN_EXPIRE_MINUTES: 60
  # Refresh token expiration time in days
  REFRESH_TOKEN_EXPIRE_DAYS: 30
  # -------------------------------
  # Datasource Configuration
  # Difyでのウェブサイトデータの取得と処理に関する設定で、
  # 特に知識ベース（Knowledge Base）機能でウェブサイトを情報源として使用する際に影響します
  # -------------------------------
  ENABLE_WEBSITE_JINAREADER: true
  ENABLE_WEBSITE_FIRECRAWL: true
  ENABLE_WEBSITE_WATERCRAWL: true
  # -------------------------------
  # Database Configuration
  # Cloud SQL Auth Proxyを利用するので同一Podの5432に接続する
  # -------------------------------
  DB_USERNAME: dify
  DB_HOST: localhost
  DB_PORT: 5432
  # -------------------------------
  # Redis Configuration
  # -------------------------------
  REDIS_HOST: dify-valkey-primary
  REDIS_PORT: 6379
  REDIS_USERNAME: default
  REDIS_PASSWORD: <VALKEY_PASSWORD> # Fixme
  REDIS_USE_SSL: false
  REDIS_DB: 0
  REDIS_USE_SENTINEL: false
  # -------------------------------
  # CELERY Configuration
  # workerから利用される
  # -------------------------------
  CELERY_BROKER_URL: 'redis://default:<VALKEY_PASSWORD>@dify-valkey-primary:6379/1' # Fixme
  # ------------------------------
  # File Storage Configuration
  # ------------------------------
  STORAGE_TYPE: 'google-storage'
  # ------------------------------
  # Vector Database Configuration
  # Cloud SQLのpgvectorの使用を想定
  # ------------------------------
  VECTOR_STORE: pgvector
  PGVECTOR_HOST: localhost
  PGVECTOR_PORT: 5432
  PGVECTOR_USER: dify
  PGVECTOR_DATABASE: dify_vector
  # https://cloud.google.com/sql/docs/postgres/extensions#pg_bigm
  PGVECTOR_PG_BIGM: true # 日本語対応
  # ------------------------------
  # Knowledge Configuration
  # ------------------------------
  UPLOAD_FILE_SIZE_LIMIT: 1024 # 1GB
  UPLOAD_FILE_BATCH_LIMIT: 20 # The maximum number of files that can be uploaded at a time
  # ------------------------------
  # Model Configuration
  # ------------------------------
  # The maximum number of tokens allowed for prompt generation.
  # This setting controls the upper limit of tokens that can be used by the LLM
  # when generating a prompt in the prompt generation tool.
  # Default: 512 tokens.
  PROMPT_GENERATION_MAX_TOKENS: 65536
  # The maximum number of tokens allowed for code generation.
  # This setting controls the upper limit of tokens that can be used by the LLM
  # when generating code in the code generation tool.
  # Default: 1024 tokens.
  CODE_GENERATION_MAX_TOKENS: 65536
  # The format of the image/video/audio/document sent when the multi-modal model is input,
  # the default is base64, optional url.
  # The delay of the call in url mode will be lower than that in base64 mode.
  # It is generally recommended to use the more compatible base64 mode.
  # If configured as url, you need to configure FILES_URL as an externally accessible address so that the multi-modal model can access the image/video/audio/document.
  MULTIMODAL_SEND_FORMAT: base64
  # Upload image file size limit, default 10M.
  UPLOAD_IMAGE_FILE_SIZE_LIMIT: 10
  # Upload video file size limit, default 1G.
  UPLOAD_VIDEO_FILE_SIZE_LIMIT: 1024
  # Upload audio file size limit, default 100M.
  UPLOAD_AUDIO_FILE_SIZE_LIMIT: 100
  # ------------------------------
  # Mail related configuration
  # ------------------------------
  MAIL_TYPE: resend
  MAIL_DEFAULT_SEND_FROM: <YOUR_EMAIL_ADDRESS> # Fixme # resendでドメイン認証の必要あり ※ 招待URLがあればjoinできるので、無くても良い
  RESEND_API_URL: 'https://api.resend.com'
  # ------------------------------
  # Plugin Daemon Configuration
  # ------------------------------
  EXPOSE_PLUGIN_DAEMON_PORT: '5002'
  PLUGIN_DAEMON_PORT: '5002'
  PLUGIN_REMOTE_INSTALLING_HOST: '0.0.0.0'
  PLUGIN_REMOTE_INSTALLING_PORT: '5003'
  PLUGIN_DAEMON_URL: http://dify-plugin-daemon:5002
  PLUGIN_MAX_PACKAGE_SIZE: '52428800'
  PLUGIN_PPROF_ENABLED: false
  PLUGIN_DEBUGGING_HOST: '0.0.0.0'
  PLUGIN_DEBUGGING_PORT: '5003'
  PLUGIN_REMOTE_INSTALL_HOST: '0.0.0.0'
  PLUGIN_REMOTE_INSTALL_PORT: '5003'
  PLUGIN_DIFY_INNER_API_URL: http://dify-api:5001
  DIFY_INNER_API_URL: http://dify-api:5001
  # プラグインが外部システムからのWebhookを受信する際のエンドポイント
  # プラグインの特定機能を外部から呼び出すためのAPI URL
  # 各プラグインインスタンスに固有のアクセスポイントを提供
  # HOST_NAMEの部分はdifyのホスト名になる
  ENDPOINT_URL_TEMPLATE: http://dify.utaha.io/e/{hook_id}
  MARKETPLACE_ENABLED: true
  MARKETPLACE_API_URL: https://marketplace.dify.ai
  MARKETPLACE_URL: https://marketplace.dify.ai
  FORCE_VERIFYING_SIGNATURE: true
  PLUGIN_PYTHON_ENV_INIT_TIMEOUT: 120
  PLUGIN_MAX_EXECUTION_TIMEOUT: 600
  # https://github.com/langgenius/dify-plugin-daemon/blob/main/.env.example
  # Plugin storage type, local aws_s3 tencent_cos azure_blob aliyun_oss
  PLUGIN_STORAGE_TYPE: local
  PLUGIN_STORAGE_LOCAL_ROOT: /app/storage
  PLUGIN_WORKING_PATH: /app/storage/cwd
  PLUGIN_INSTALLED_PATH: plugin
  PLUGIN_PACKAGE_CACHE_PATH: plugin_packages
  PLUGIN_MEDIA_CACHE_PATH: assets
  # ------------------------------
  # Sandbox Configuration
  # ------------------------------
  CODE_EXECUTION_ENDPOINT: http://dify-sandbox:8194
  CODE_MAX_NUMBER: '9223372036854775807'
  CODE_MIN_NUMBER: '-9223372036854775808'
  CODE_MAX_DEPTH: 5
  CODE_MAX_PRECISION: 20
  CODE_MAX_STRING_LENGTH: 80000
  CODE_MAX_STRING_ARRAY_LENGTH: 30
  CODE_MAX_OBJECT_ARRAY_LENGTH: 30
  CODE_MAX_NUMBER_ARRAY_LENGTH: 1000
  CODE_EXECUTION_CONNECT_TIMEOUT: 10
  CODE_EXECUTION_READ_TIMEOUT: 60
  CODE_EXECUTION_WRITE_TIMEOUT: 10
  TEMPLATE_TRANSFORM_MAX_LENGTH: 80000
  # ------------------------------
  # Workflow Configuration
  # ------------------------------
  WORKFLOW_MAX_EXECUTION_STEPS: 500
  WORKFLOW_MAX_EXECUTION_TIME: 1200
  WORKFLOW_CALL_MAX_DEPTH: 5
  MAX_VARIABLE_SIZE: 204800
  WORKFLOW_PARALLEL_DEPTH_LIMIT: 3
  WORKFLOW_FILE_UPLOAD_LIMIT: 10
  WORKFLOW_NODE_EXECUTION_STORAGE: rdbms

global:
  project: <YOUR_GCP_PROJECT_ID> # Fixme
  edition: "SELF_HOSTED"

serviceAccount:
  create: true

cloudSqlProxy:
  region: asia-northeast1
  instance: <CLOUD_SQL_INSTANCE_NAME> # Fixme
  resources:
    requests:
      cpu: 100m
      memory: 256Mi

api:
  replicas: 1
  image:
    repository: langgenius/dify-api
    tag: 1.4.1
    pullPolicy: IfNotPresent
  hpa:
    enables: true
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: ''
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 1000m
      memory: 2Gi
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 5
    periodSeconds: 30
    successThreshold: 1
    failureThreshold: 2
  readinessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 10
    timeoutSeconds: 5
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 10
  additionalEnv:
    DB_DATABASE: dify
    ETL_TYPE: 'dify'
    INNER_API: 'true'
    ENTERPRISE_ENABLED: 'false'
  containerPort: 5001
  service:
    type: ClusterIP
    port: 5001

worker:
  replicas: 1
  image:
    repository: langgenius/dify-api
    tag: 1.4.1
    pullPolicy: IfNotPresent
  hpa:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: ''
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 2000m
      memory: 4Gi
  additionalEnv:
    MODE: worker
    DB_DATABASE: dify
    ETL_TYPE: 'dify'

web:
  replicas: 1
  image:
    repository: langgenius/dify-web
    tag: 1.4.1
    pullPolicy: IfNotPresent
  hpa:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: ''
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  containerPort: 3000
  livenessProbe:
    httpGet:
      path: /apps
      port: http
      httpHeaders:
        - name: accept-language
          value: ja
    initialDelaySeconds: 3
    timeoutSeconds: 5
    periodSeconds: 30
    successThreshold: 1
    failureThreshold: 2
  readinessProbe:
    httpGet:
      path: /apps
      port: http
      httpHeaders:
        - name: accept-language
          value: ja
    initialDelaySeconds: 3
    timeoutSeconds: 5
    periodSeconds: 30
    successThreshold: 1
    failureThreshold: 2
  service:
    type: ClusterIP
    port: 3000

pluginDaemon:
  replicas: 1 # ローカルファイルシステムに強力に依存するので、NFSを使わない限り1 ※ GCSFUSEはうまく使えない
  image:
    repository: langgenius/dify-plugin-daemon
    tag: 0.1.1-local
    pullPolicy: IfNotPresent
  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: ''
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  livenessProbe:
    tcpSocket:
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 5
    periodSeconds: 30
    successThreshold: 1
    failureThreshold: 2
  readinessProbe:
    tcpSocket:
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 5
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 10
  additionalEnv:
    DB_DATABASE: dify_plugin
    SERVER_PORT: '5002'
  containerPort: 5002
  debugPort: 5003
  persistence:
    enabled: true
    storageClass: 'standard-rwo-retain'
    size: 30Gi
    accessMode: ReadWriteOnce
  service:
    type: ClusterIP
    port: 5002
    debugPort: 5003

sandbox:
  replicas: 1
  image:
    repository: langgenius/dify-sandbox
    tag: 0.2.12
    pullPolicy: IfNotPresent
  hpa:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: ''
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1Gi
  readinessProbe:
    tcpSocket:
      port: http
    initialDelaySeconds: 1
    timeoutSeconds: 5
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 10
  livenessProbe:
    tcpSocket:
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 5
    periodSeconds: 30
    successThreshold: 1
    failureThreshold: 2
  containerPort: 8194
  service:
    type: ClusterIP
    port: 8194
    targetPort: http
  additionalEnv:
    GIN_MODE: release
    WORKER_TIMEOUT: 15
    PLACEHOLDER: PLACEHOLDER
    GOOGLE_STORAGE_BUCKET_NAME: <SANDBOX_BUCKET_NAME> # Fixme
  bucketName: <SANDBOX_BUCKET_NAME> # Fixme
  config:
    # pythonRequirements: |
    #   numpy==1.20.3
    #   scipy==1.6.3
    pythonRequirements: ''

podSecurityContext:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  runAsNonRoot: true

securityContext:
  allowPrivilegeEscalation: false

affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: cloud.google.com/gke-nodepool
              operator: In
              values:
                - <YOUR_NODE_POOL_NAME> # Fixme # e.g. default-pool

gateway:
  enabled: true
  gatewayClassName: gke-l7-global-external-managed
  addressName: <YOUR_GLOBAL_ADDRESS_NAME> # Fixme
  hostName: <YOUR_HOST_NAME> # Fixme # e.g. dify.example.com
  sslPolicy: <YOUR_SSL_POLICY_NAME> # Fixme
  annotations:
    networking.gke.io/certmap: <YOUR_CERT_MAP_NAME> # Fixme

externalSecret:
  refreshInterval: 10m
  data:
    # A secret key that is used for securely signing the session cookie
    # and encrypting sensitive information on the database.
    # You can generate a strong key using `openssl rand -base64 42`.
    - secretKey: SECRET_KEY
      remoteRef:
        key: DIFY_SECRET_KEY
        version: latest
    # Password for admin user initialization.
    # If left unset, admin user will not be prompted for a password
    # when creating the initial admin account.
    # The length of the password cannot exceed 30 characters.
    - secretKey: INIT_PASSWORD
      remoteRef:
        key: DIFY_INIT_PASSWORD
        version: latest
    - secretKey: DB_PASSWORD
      remoteRef:
        key: DIFY_DB_PASSWORD
        version: latest
    - secretKey: PGVECTOR_PASSWORD
      remoteRef:
        key: DIFY_DB_PASSWORD
        version: latest
    # resendから取得
    - secretKey: RESEND_API_KEY
      remoteRef:
        key: DIFY_RESEND_API_KEY
        version: latest
    # openssl rand -base64 30
    - secretKey: SERVER_KEY
      remoteRef:
        key: DIFY_PLUGIN_DAEMON_KEY
        version: latest
    # openssl rand -base64 30
    - secretKey: INNER_API_KEY_FOR_PLUGIN
      remoteRef:
        key: DIFY_PLUGIN_INNER_API_KEY
        version: latest
    - secretKey: DIFY_INNER_API_KEY
      remoteRef:
        key: DIFY_PLUGIN_INNER_API_KEY
        version: latest
    - secretKey: PLUGIN_DAEMON_KEY
      remoteRef:
        key: DIFY_PLUGIN_INNER_API_KEY
        version: latest
    - secretKey: PLUGIN_DIFY_INNER_API_KEY
      remoteRef:
        key: DIFY_PLUGIN_INNER_API_KEY
        version: latest
    # openssl rand -base64 30
    - secretKey: CODE_EXECUTION_API_KEY
      remoteRef:
        key: DIFY_CODE_EXECUTION_API_KEY
        version: latest

valkey:
  enabled: true
  architecture: standalone
  primary:
    extraFlags:
      - '--maxmemory-policy noeviction'
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: cloud.google.com/gke-nodepool
                  operator: In
                  values:
                    - <YOUR_NODE_POOL_NAME> # Fixme # e.g. default-pool
  auth:
    password: <VALKEY_PASSWORD> # Fixme
